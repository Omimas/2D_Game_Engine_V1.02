#ifndef ENGINE_H
#define ENGINE_H

#include <SDL.h>
#include <SDL_ttf.h>
#include <string>
#include <vector>
#include <utility>
#include <iostream>

class Engine {
public:
    Engine();
    ~Engine();

    bool initialize();
    void run();

private:
    void handleEvents();
    void handleKeyPress(SDL_Keycode key);
    void handleKeyRelease(SDL_Keycode key);
    void handleMouseMotion(int mouseX, int mouseY);
    void handleMouseWheel(int y);
    void toggleFullscreen();
    void toggleGravityMode(const std::string& onText, const std::string& offText, float speed, float acceleration);
    void startSnakeGame();
    void updateSnakeGame();
    void renderSnakeGame();
    void resetSnakeGame();
    void renderMenu();
    void drawTextBox();
    void setBackgroundColor(const std::string& colorName);
    void update();
    void render();

    bool isRunning;
    SDL_Window* window;
    SDL_Renderer* renderer;
    TTF_Font* font;

    int rectX, rectY;
    int rectWidth, rectHeight;
    bool gravityMode;
    std::string gravityText;
    float gravitySpeed;
    float gravityAcceleration;
    int windowWidth, windowHeight;
    SDL_Color rectColor;
    bool showTextBox;
    std::string inputText;
    bool snakeGameActive;
    enum Direction { UP, DOWN, LEFT, RIGHT };
    Direction snakeDirection;
    int snakeSpeed;
    int snakeBoostedSpeed;
    bool gameOver;
    int score;
    int timer;
    Uint32 startTime;
    bool isPaused;
    int frameCount;
    Uint32 lastFPSUpdateTime;
    int fps;
    std::pair<int, int> foodPosition;
    bool showHelp;
    SDL_Color backgroundColor;
    std::vector<std::pair<int, int>> snakeBody;

    float velocityY;
    float bounceFactor;
    float groundFriction;
    bool isOnGround;

    Uint32 lastUpdateTime;
    float deltaTime;
    Uint32 lastSnakeMoveTime; // Yeni eklenen
};

#endif // ENGINE_H